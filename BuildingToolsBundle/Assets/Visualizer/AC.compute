// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float3> Result;
Texture2D<float3> Last;

float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float2 PixelOffset;

struct BlockData
{
	float id;
	float armor;
};

uniform StructuredBuffer<int> Id;
uniform StructuredBuffer<float> Armor;

uniform StructuredBuffer<float> ArmorMultiplier;
uniform int3 Shape;
uniform float MaxArmor;

#define armorMultiplierLastIndex 7
#define inf 100000000


struct Ray
{
	float3 origin;
	float3 direction;
	float3 invDirection;
};

struct RayBoxIntersectionResult
{
	bool flag;
	float distance;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;

	ray.invDirection = 1 / direction;

	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

RayBoxIntersectionResult RayBoxIntersection(Ray ray, uint3 max)
{
	float tmin, tmax, tymin, tymax, tzmin, tzmax;
	RayBoxIntersectionResult result;

	if (ray.direction.x >= 0) {
		tmin = -ray.origin.x * ray.invDirection.x;
		tmax = (max.x - ray.origin.x) * ray.invDirection.x;
	}
	else {
		tmin = (max.x - ray.origin.x) * ray.invDirection.x;
		tmax = -ray.origin.x * ray.invDirection.x;
	}

	if (ray.direction.y >= 0) {
		tymin = -ray.origin.y * ray.invDirection.y;
		tymax = (max.y - ray.origin.y) * ray.invDirection.y;
	}
	else {
		tymin = (max.y - ray.origin.y) * ray.invDirection.y;
		tymax = -ray.origin.y * ray.invDirection.y;
	}

	if (tmin > tymax || tymin > tmax) {
		result.flag = false;
		return result;
	}

	if (tymin > tmin)
		tmin = tymin;

	if (tymax < tmax)
		tmax = tymax;

	if (ray.direction.z >= 0) {
		tzmin = -ray.origin.z * ray.invDirection.z;
		tzmax = (max.z - ray.origin.z) * ray.invDirection.z;
	}
	else {
		tzmin = (max.z - ray.origin.z) * ray.invDirection.z;
		tzmax = -ray.origin.z * ray.invDirection.z;
	}

	if (tmin > tzmax || tzmin > tmax) {
		result.flag = false;
		return result;
	}

	if (tzmin > tmin)
		tmin = tzmin;

	if (tzmax < tmax)
		tmax = tzmax;

	result.flag = true;
	result.distance = tmin;
	return result;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);


	RayBoxIntersectionResult intersection = RayBoxIntersection(ray, Shape);

	if (!intersection.flag) {
		Result[id.xy] = float3(ray.direction * 0.5f + 0.5f);
		return;
	}

	float3 tMax, tDelta;
	int3 step = int3(0, 0, 0);

	float3 dir = ray.direction;
	float3 start = ray.origin + (intersection.distance + 0.001) * dir;

	int x = (int)start.x;
	int y = (int)start.y;
	int z = (int)start.z;

	step = dir >= 0 ? 1 : -1;

	tDelta = (dir != 0) ? ray.invDirection * step : inf;

	tMax = tDelta * ((step > 0) ? (1 - start + floor(start)) : (start - floor(start)));

	float armor = 0;
	int layerCount = -1;
	int index;

	int uid;
	float currentArmor;

	int lastId = 0;

	while (x < Shape.x && x >= 0 && y < Shape.y && y >= 0 && z < Shape.z && z >= 0)
	{
		index = x + Shape.x * (y + Shape.y * z);
		currentArmor = Armor[index];
		if (currentArmor > 0) {
			uid = Id[index];
			if (uid != lastId) {
				lastId = uid;
				layerCount += 1;
				armor += currentArmor * ArmorMultiplier[min(layerCount, armorMultiplierLastIndex)];
			}
		}
		else if (armor > 0) {
			break;
		}

		if (tMax.x < tMax.y) {
			if (tMax.x < tMax.z) {
				x += step.x;
				tMax.x += tDelta.x;
			}
			else {
				z += step.z;
				tMax.z += tDelta.z;
			}
		}
		else {
			if (tMax.y < tMax.z) {
				y += step.y;
				tMax.y += tDelta.y;
			}
			else {
				z += step.z;
				tMax.z += tDelta.z;
			}
		}
	}
	if (armor > 0) {
		armor = armor / MaxArmor;
		Result[id.xy] = float3(
			(armor - 1.0 / 3.0) * 3,
			1 - (armor - 2.0 / 3.0) * 3,
			1 - armor * 3
		);
	}
	else {
		Result[id.xy] = float3(dir * 0.5f + 0.5f);
	}
}
